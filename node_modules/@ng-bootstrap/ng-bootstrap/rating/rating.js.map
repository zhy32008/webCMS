{"version":3,"file":"rating.js","sourceRoot":"","sources":["../../src/rating/rating.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,uBAAuB,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAS,MAAM,eAAe;OAC9F,EAAC,eAAe,EAAC,MAAM,iBAAiB;AAE/C;;GAEG;AAEH;IAqCE,mBAAY,MAAuB;QAnCnC,UAAK,GAAa,EAAE,CAAC;QAiBrB;;;WAGG;QACF,UAAK,GAAG,IAAI,YAAY,EAAU,CAAC;QAEpC;;;WAGG;QACF,UAAK,GAAG,IAAI,YAAY,EAAU,CAAC;QAEpC;;;WAGG;QACF,eAAU,GAAG,IAAI,YAAY,EAAU,CAAC;QAGvC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,yBAAK,GAAL,UAAM,KAAa;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,4BAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC5C,CAAC;IAED,yBAAK,GAAL;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAED,0BAAM,GAAN,UAAO,KAAa;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEO,yCAAqB,GAA7B;QACE,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,KAAK,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACI,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,YAAY;oBACtB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,2jBAST;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,wBAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,eAAe,GAAG;KACxB,CAAC;IACK,wBAAc,GAA2C;QAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC5B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC5B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAChC,CAAC;IACF,gBAAC;AAAD,CAAC,AAtGD,IAsGC;AAED,OAAO,IAAM,qBAAqB,GAAG,CAAC,SAAS,CAAC,CAAC","sourcesContent":["import {Component, ChangeDetectionStrategy, Input, Output, EventEmitter, OnInit} from '@angular/core';\nimport {NgbRatingConfig} from './rating-config';\n\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\n\nexport class NgbRating implements OnInit {\n  private _oldRate: number;\n  range: number[] = [];\n\n  /**\n   * Maximal rating that can be given using this widget.\n   */\n   max: number;\n\n  /**\n   * Current rating.\n   */\n   rate: number;\n\n  /**\n   * A flag indicating if rating can be updated.\n   */\n   readonly: boolean;\n\n  /**\n   * An event fired when a user is hovering over a given rating.\n   * Event's payload equals to the rating being hovered over.\n   */\n   hover = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user stops hovering over a given rating.\n   * Event's payload equals to the rating of the last item being hovered over.\n   */\n   leave = new EventEmitter<number>();\n\n  /**\n   * An event fired when a user selects a new rating.\n   * Event's payload equals to the newly selected rating.\n   */\n   rateChange = new EventEmitter<number>();\n\n  constructor(config: NgbRatingConfig) {\n    this.max = config.max;\n    this.readonly = config.readonly;\n  }\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.rate = value;\n    }\n    this.hover.emit(value);\n  }\n\n  ngOnInit(): void {\n    this._oldRate = this.rate;\n    this.range = this._buildTemplateObjects();\n  }\n\n  reset(): void {\n    this.leave.emit(this.rate);\n    this.rate = this._oldRate;\n  }\n\n  update(value: number): void {\n    if (!this.readonly) {\n      this._oldRate = value;\n      this.rate = value;\n      this.rateChange.emit(value);\n    }\n  }\n\n  private _buildTemplateObjects(): number[] {\n    let range = [];\n    for (let i = 1; i <= this.max; i++) {\n      range.push({title: i});\n    }\n    return range;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-rating',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\">\n      <template ngFor let-r [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" [title]=\"r.title\" \n        [attr.aria-valuetext]=\"r.title\" \n        [style.cursor]=\"readonly ? 'not-allowed' : 'pointer'\">{{ index < rate ? '&#9733;' : '&#9734;' }}</span>\n      </template>\n    </span>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbRatingConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'max': [{ type: Input },],\n'rate': [{ type: Input },],\n'readonly': [{ type: Input },],\n'hover': [{ type: Output },],\n'leave': [{ type: Output },],\n'rateChange': [{ type: Output },],\n};\n}\n\nexport const NGB_RATING_DIRECTIVES = [NgbRating];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}